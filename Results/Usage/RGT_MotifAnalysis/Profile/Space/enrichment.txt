./InputMatrixTest.txt ../../OutputTest/
Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   732  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.p_value)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   840  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.corr_p_value)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   837  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.name)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   838  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.percent, reverse=True)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   733  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.corr_p_value)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   731  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.percent, reverse=True)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   839  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.p_value)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   730  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.name)


Filename: /home/egg/Projects/RGT/Results/Usage/RGT_MotifAnalysis/Installation/lib/python2.7/site-packages/RGT-0.0.1-py2.7.egg/rgt/motifanalysis/Main.py

Line #    Mem usage    Increment   Line Contents
================================================
   384   25.395 MiB    0.000 MiB   @profile
   385                             def main_enrichment():
   386                                 """
   387                                 Performs motif enrichment.
   388                             
   389                                 Authors: Eduardo G. Gusmao.
   390                                 """
   391                             
   392                                 ###################################################################################################
   393                                 # Processing Input Arguments
   394                                 ###################################################################################################
   395                             
   396                                 # Initializing Error Handler
   397   25.395 MiB    0.000 MiB       main_error_handler = ErrorHandler()
   398                             
   399                                 # Parameters
   400   25.395 MiB    0.000 MiB       usage_message = "%prog --enrichment [options] <experiment_matrix> <input_path>"
   401                             
   402                                 # Initializing Option Parser
   403   25.395 MiB    0.000 MiB       parser = PassThroughOptionParser(usage = usage_message)
   404                             
   405                                 # Optional Input Options
   406                                 #parser.add_option("--xxxxxx", dest = "xxxxxx", type = "xxxxxx", metavar="xxxxxx", default = None,
   407                                 #                  help = ("xxxxxx "))
   408                             
   409                                 # Parameters Options
   410   25.395 MiB    0.000 MiB       parser.add_option("--organism", dest = "organism", type = "string", metavar="STRING", default = "hg19",
   411   25.395 MiB    0.000 MiB                         help = ("Organism considered on the analysis. Check our full documentation for all available "
   412                                                           "options. All default files such as genomes will be based on the chosen organism "
   413                                                           "and the data.config file."))
   414   25.395 MiB    0.000 MiB       parser.add_option("--promoter-length", dest = "promoter_length", type = "int", metavar="INT", default = 1000,
   415   25.395 MiB    0.000 MiB                         help = ("Length of the promoter region (in bp) considered on the creation of the regions-gene association."))
   416   25.395 MiB    0.000 MiB       parser.add_option("--maximum-association-length", dest = "maximum_association_length", type = "int", metavar="INT", default = 50000,
   417   25.395 MiB    0.000 MiB                         help = ("Maximum distance between a coordinate and a gene (in bp) in order for the former to "
   418                                                           "be considered associated with the latter."))
   419   25.395 MiB    0.000 MiB       parser.add_option("--multiple-test-alpha", dest = "multiple_test_alpha", type = "float", metavar="FLOAT", default = 0.05,
   420   25.395 MiB    0.000 MiB                         help = ("Alpha value for multiple test."))
   421   25.395 MiB    0.000 MiB       parser.add_option("--processes", dest = "processes", type = "int", metavar="INT", default = 1,
   422   25.395 MiB    0.000 MiB                         help = ("Number of processes for multi-CPU based machines."))
   423                             
   424                                 # Output Options
   425   25.395 MiB    0.000 MiB       parser.add_option("--output-location", dest = "output_location", type = "string", metavar="PATH", default = None,
   426   25.395 MiB    0.000 MiB                         help = ("Path where the output files will be written. Default is the input PATH."))
   427   25.395 MiB    0.000 MiB       parser.add_option("--print-thresh", dest = "print_thresh", type = "float", metavar="FLOAT", default = 0.05,
   428   25.395 MiB    0.000 MiB                         help = ("Only MPBSs whose factor's enrichment corrected p-value are less than equal "
   429                                                           "this option are print. Use 1.0 to print all MPBSs."))
   430   25.398 MiB    0.004 MiB       parser.add_option("--bigbed", dest = "bigbed", action = "store_true", default = False,
   431   25.398 MiB    0.000 MiB                         help = ("If this option is used, all bed files will be written as bigbed."))
   432                             
   433                                 # Processing Options
   434   25.402 MiB    0.004 MiB       options, arguments = parser.parse_args()
   435                             
   436                                 # Additional Parameters
   437   25.406 MiB    0.004 MiB       matching_folder_name = "Match"
   438   25.410 MiB    0.004 MiB       random_region_name = "random_regions"
   439   25.414 MiB    0.004 MiB       dump_file_name = "dump.p"
   440   25.414 MiB    0.000 MiB       gene_column_name = "genegroup"
   441   25.414 MiB    0.000 MiB       output_association_name = "coord_association"
   442   25.414 MiB    0.000 MiB       output_mpbs_filtered = "mpbs"
   443   25.414 MiB    0.000 MiB       output_mpbs_filtered_ev = "mpbs_ev"
   444   25.414 MiB    0.000 MiB       output_mpbs_filtered_nev = "mpbs_nev"
   445   25.414 MiB    0.000 MiB       output_stat_genetest = "genetest_statistics"
   446   25.414 MiB    0.000 MiB       output_stat_randtest = "randtest_statistics"
   447   25.414 MiB    0.000 MiB       ev_color = "0,130,0"
   448   25.414 MiB    0.000 MiB       nev_color = "130,0,0"
   449   25.414 MiB    0.000 MiB       results_header_text = "\t".join(["FACTOR","P-VALUE","CORR.P-VALUE","A","B","C","D","FREQ","BACK.FREQ.","GENES"])
   450   25.414 MiB    0.000 MiB       cluster_path_fix = ""
   451   25.414 MiB    0.000 MiB       html_header = ["FACTOR","MOTIF","P-VALUE","CORRECTED P-VALUE","A","B","C","D","FREQUENCY","BACKGROUND FREQUENCY","GO"]
   452   25.414 MiB    0.000 MiB       html_type_list = "sissssssssl"
   453   25.414 MiB    0.000 MiB       logo_width = 200
   454   25.418 MiB    0.004 MiB       if("hg" in options.organism): gprofiler_link = "http://biit.cs.ut.ee/gprofiler/index.cgi?significant=1&sort_by_structure=1&ordered_query=0&organism=hsapiens&query="
   455                                 else: gprofiler_link = "http://biit.cs.ut.ee/gprofiler/index.cgi?significant=1&sort_by_structure=1&ordered_query=0&organism=mmusculus&query="
   456   25.418 MiB    0.000 MiB       html_col_size = [300,logo_width,100,100,50,50,50,50,100,100,50]
   457                             
   458                                 ###################################################################################################
   459                                 # Initializations
   460                                 ###################################################################################################
   461                             
   462                                 # Output folder
   463   25.418 MiB    0.000 MiB       if(options.output_location): output_location = options.output_location
   464                                 else:
   465   25.418 MiB    0.000 MiB           try:
   466   25.418 MiB    0.000 MiB               matrix_name_without_ext = ".".join(arguments[0].split(".")[:-1])
   467   25.418 MiB    0.000 MiB               output_location = os.path.join(arguments[1],os.path.basename(matrix_name_without_ext))
   468                                     except Exception: main_error_handler.throw_error("ME_OUT_FOLDER_CREATION")
   469                             
   470                                 # Default genomic data
   471   25.422 MiB    0.004 MiB       genome_data = GenomeData(options.organism)
   472                             
   473                                 # Default motif data
   474   25.430 MiB    0.008 MiB       motif_data = MotifData()
   475                             
   476                                 # Default image data
   477   25.434 MiB    0.004 MiB       image_data = ImageData()
   478                             
   479                                 ###################################################################################################
   480                                 # Reading Input Matrix
   481                                 ###################################################################################################
   482                             
   483   25.441 MiB    0.008 MiB       print arguments[0], arguments[1]
   484                             
   485                                 # Reading arguments
   486   25.441 MiB    0.000 MiB       try:
   487   25.441 MiB    0.000 MiB           input_matrix = arguments[0]
   488   25.441 MiB    0.000 MiB           input_location = arguments[1]
   489   25.441 MiB    0.000 MiB           if(len(arguments) > 2): main_error_handler.throw_warning("ME_MANY_ARG")
   490                                 except Exception: main_error_handler.throw_error("ME_FEW_ARG")
   491                             
   492                                 # Create experimental matrix
   493   25.441 MiB    0.000 MiB       try:
   494   25.441 MiB    0.000 MiB           exp_matrix = ExperimentalMatrix()
   495   25.484 MiB    0.043 MiB           exp_matrix.read(input_matrix)
   496                                 except Exception: main_error_handler.throw_error("ME_WRONG_EXPMAT")
   497                             
   498                                 ###################################################################################################
   499                                 # Reading Regions & Gene Lists
   500                                 ###################################################################################################
   501                             
   502                                 # Initializations
   503   25.484 MiB    0.000 MiB       input_list = []
   504                             
   505                                 # Reading dictionary grouped by fields
   506   25.484 MiB    0.000 MiB       flag_gene = True
   507   25.484 MiB    0.000 MiB       try:
   508   25.484 MiB    0.000 MiB           exp_matrix_fields_dict = exp_matrix.fieldsDict[gene_column_name]
   509                                 except Exception: flag_gene = False
   510                             
   511                                 # Reading dictionary of objects
   512   25.484 MiB    0.000 MiB       try:
   513   25.484 MiB    0.000 MiB           exp_matrix_objects_dict = exp_matrix.objectsDict
   514                                 except Exception: main_error_handler.throw_error("ME_WRONG_EXPMAT")
   515                             
   516   25.484 MiB    0.000 MiB       if(flag_gene): # Genelist and randomic analysis will be performed
   517                             
   518                                     # Iterating on experimental matrix fields
   519   25.484 MiB    0.000 MiB           for g in exp_matrix_fields_dict.keys():
   520                             
   521                                         # Create input which will contain all regions associated with such gene group
   522   25.484 MiB    0.000 MiB               curr_input = Input(None, [])
   523                             
   524                                         # This flag will be used to see if there are two gene files associated with the same gene label on genegroup column
   525   25.484 MiB    0.000 MiB               flag_foundgeneset = False
   526                             
   527                                         # Iterating on experimental matrix objects
   528   25.484 MiB    0.000 MiB               for k in exp_matrix_fields_dict[g]:
   529                             
   530   25.484 MiB    0.000 MiB                   curr_object = exp_matrix_objects_dict[k]
   531                             
   532                                             # If the current object is a GenomicRegionSet
   533   25.484 MiB    0.000 MiB                   if(isinstance(curr_object,GenomicRegionSet)):
   534                             
   535                                                 # Sorting input region
   536   25.484 MiB    0.000 MiB                       curr_object.sort()
   537                             
   538                                                 # Updating Input object
   539   25.484 MiB    0.000 MiB                       curr_input.region_list.append(curr_object)
   540                             
   541                                             # If the current object is a GeneSet
   542   25.484 MiB    0.000 MiB                   if(isinstance(curr_object,GeneSet)):
   543                             
   544                                                 # Updating Input object
   545   25.484 MiB    0.000 MiB                       curr_object.name = g # The name in gene_group column will be used. The 'name' column for genes are not used.
   546   25.484 MiB    0.000 MiB                       if(not flag_foundgeneset):
   547   25.484 MiB    0.000 MiB                           curr_input.gene_set = curr_object
   548   25.484 MiB    0.000 MiB                           flag_foundgeneset = True
   549                                                 else: main_error_handler.throw_warning("ME_MANY_GENESETS")
   550                                                 
   551   25.484 MiB    0.000 MiB               if(not flag_foundgeneset): main_error_handler.throw_warning("ME_FEW_GENESETS")
   552                             
   553                                         # Update input list
   554   25.484 MiB    0.000 MiB               input_list.append(curr_input)
   555                             
   556                                 else: # Only randomic analysis will be performed
   557                             
   558                                     # Create single input which will contain all regions
   559                                     single_input = Input(None, [])
   560                             
   561                                     # Iterating on experimental matrix objects
   562                                     for k in exp_matrix_objects_dict.keys():
   563                             
   564                                         curr_object = exp_matrix_objects_dict[k]
   565                             
   566                                         # If the current object is a GenomicRegionSet
   567                                         if(isinstance(curr_object,GenomicRegionSet)):
   568                             
   569                                             # Sorting input region
   570                                             curr_object.sort()
   571                             
   572                                             # Updating Input object
   573                                             single_input.region_list.append(curr_object)
   574                             
   575                                     # Updating input list with single input (only randomic analysis will be performed)
   576                                     input_list = [single_input]
   577                             
   578                                 ###################################################################################################
   579                                 # Reading Motif Matching
   580                                 ###################################################################################################
   581                             
   582                                 # Verifying if file exists
   583   25.484 MiB    0.000 MiB       curr_dump_file_name = os.path.join(input_location,matching_folder_name,dump_file_name)
   584   25.484 MiB    0.000 MiB       if(not os.path.exists(curr_dump_file_name)): main_error_handler.throw_error("ME_MATCH_NOTFOUND")
   585                                 
   586                                 # Opening dump
   587   25.484 MiB    0.000 MiB       dump_file = open(curr_dump_file_name, "rb")
   588   25.738 MiB    0.254 MiB       mpbs_dict = load(dump_file)
   589   25.734 MiB   -0.004 MiB       dump_file.close()
   590                             
   591                                 # Sorting dictionary keys
   592   25.734 MiB    0.000 MiB       try:
   593   25.734 MiB    0.000 MiB           sorted_mpbs_dict_keys = mpbs_dict[mpbs_dict.keys()[0]].keys()
   594   25.734 MiB    0.000 MiB           sorted_mpbs_dict_keys.sort()
   595                                 except Exception: main_error_handler.throw_error("ME_BAD_MATCH")
   596                             
   597                                 # Creating groups of motifs given the number of processes
   598   25.734 MiB    0.000 MiB       if(options.processes <= 0): main_error_handler.throw_error("ME_LOW_NPROC")
   599   25.734 MiB    0.000 MiB       elif(options.processes == 1): grouped_mpbs_dict_keys = [[e] for e in sorted_mpbs_dict_keys]
   600                                 else: grouped_mpbs_dict_keys = map(None, *(iter(sorted_mpbs_dict_keys),) * options.processes)
   601   25.734 MiB    0.000 MiB       corrected_grouped = []
   602   25.734 MiB    0.000 MiB       for vec in grouped_mpbs_dict_keys: corrected_grouped.append([e for e in vec if e])
   603   25.734 MiB    0.000 MiB       grouped_mpbs_dict_keys = corrected_grouped
   604                             
   605                                 ###################################################################################################
   606                                 # Reading Random Coordinates
   607                                 ###################################################################################################
   608                             
   609                                 # Verifying if file exists
   610   25.734 MiB    0.000 MiB       random_region_glob = glob(os.path.join(input_location,matching_folder_name,random_region_name+".*"))
   611   25.734 MiB    0.000 MiB       try: random_region_file_name = random_region_glob[0]
   612                                 except Exception: main_error_handler.throw_error("ME_RAND_NOTFOUND")
   613                             
   614                                 # Creating GenomicRegionSet
   615   25.734 MiB    0.000 MiB       random_regions = GenomicRegionSet(random_region_name)
   616                             
   617                                 # Reading bed file
   618   25.734 MiB    0.000 MiB       if(random_region_file_name.split(".")[-1] == "bed"):
   619                                     random_regions.read_bed(random_region_file_name)
   620                             
   621                                 # Reading bigbed file
   622   25.734 MiB    0.000 MiB       elif(random_region_file_name.split(".")[-1] == "bb"):
   623   25.734 MiB    0.000 MiB           try:
   624   25.734 MiB    0.000 MiB               bed_file_name = ".".join(random_region_file_name.split(".")[:-1])
   625   25.742 MiB    0.008 MiB               os.system(" ".join(["bigBedToBed", random_region_file_name, bed_file_name]))
   626   25.742 MiB    0.000 MiB               random_regions.read_bed(bed_file_name)
   627   25.742 MiB    0.000 MiB               os.remove(bed_file_name)
   628                                     except Exception: main_error_handler.throw_error("ME_BAD_RAND")
   629                                 else: main_error_handler.throw_error("ME_RAND_NOT_BED_BB")
   630                             
   631                                 # Evaluating random statistics - The gene set and mpbss are not needed (None)
   632   26.078 MiB    0.336 MiB       rand_c_dict, rand_d_dict, rand_geneset, rand_mpbs_dict = get_fisher_dict(grouped_mpbs_dict_keys, random_regions, mpbs_dict[random_regions.name])
   633   26.078 MiB    0.000 MiB       rand_geneset = None; rand_mpbs_dict = None
   634                                 
   635                                 ###################################################################################################
   636                                 # Enrichment Statistics
   637                                 ###################################################################################################
   638                             
   639                                 # Creating link dictionary for HTML file
   640   26.078 MiB    0.000 MiB       genetest_link_dict = dict()
   641   26.078 MiB    0.000 MiB       randtest_link_dict = dict()
   642   26.078 MiB    0.000 MiB       link_location = "file://"+os.path.abspath(output_location)
   643   26.078 MiB    0.000 MiB       for curr_input in input_list:
   644   26.078 MiB    0.000 MiB           for grs in curr_input.region_list:
   645   26.078 MiB    0.000 MiB               if(curr_input.gene_set):
   646   26.078 MiB    0.000 MiB                   link_name = grs.name+" ("+curr_input.gene_set.name+")"
   647   26.078 MiB    0.000 MiB                   genetest_link_dict[link_name] = os.path.join(link_location,grs.name+"__"+curr_input.gene_set.name,output_stat_genetest+".html")
   648   26.078 MiB    0.000 MiB                   randtest_link_dict[link_name] = os.path.join(link_location,grs.name+"__"+curr_input.gene_set.name,output_stat_randtest+".html")
   649                                         else: 
   650                                             link_name = grs.name
   651                                             randtest_link_dict[link_name] = os.path.join(link_location,link_name,output_stat_randtest+".html")
   652                             
   653                                 # Iterating on each input object
   654  123.738 MiB   97.660 MiB       for curr_input in input_list:
   655                             
   656                                     # Iterating on each input genomic region set
   657  123.738 MiB    0.000 MiB           for grs in curr_input.region_list:
   658                             
   659                                         # Initialization
   660  123.219 MiB   -0.520 MiB               original_name = grs.name
   661                             
   662                                         # Creating output folder
   663  123.219 MiB    0.000 MiB               if(curr_input.gene_set): curr_output_folder_name = os.path.join(output_location,grs.name+"__"+curr_input.gene_set.name)
   664                                         else: curr_output_folder_name = os.path.join(output_location,grs.name)
   665  123.219 MiB    0.000 MiB               if(not os.path.isdir(curr_output_folder_name)): os.makedirs(curr_output_folder_name)
   666                             
   667                                         ###################################################################################################
   668                                         # Gene Evidence Statistics
   669                                         ################################################################################################### 
   670                             
   671  123.219 MiB    0.000 MiB               if(curr_input.gene_set):
   672                             
   673                                             # Performing association of input region with gene_set
   674  123.738 MiB    0.520 MiB                   grs = grs.gene_association(curr_input.gene_set, options.organism, options.promoter_length, options.maximum_association_length)
   675                             
   676                                             # Writing gene-coordinate association
   677  123.738 MiB    0.000 MiB                   output_file_name = os.path.join(curr_output_folder_name,output_association_name+".bed")
   678  123.738 MiB    0.000 MiB                   output_file = open(output_file_name,"w")
   679  123.742 MiB    0.004 MiB                   for gr in grs:
   680  123.742 MiB    0.000 MiB                       if(gr.name == "."): curr_name = "."
   681                                                 else:
   682  123.742 MiB    0.000 MiB                           curr_gene_list = [e if e[0]!="." else e[1:] for e in gr.name.split(":")]
   683  123.742 MiB    0.000 MiB                           curr_prox_list = gr.data.split(":")
   684  123.742 MiB    0.000 MiB                           curr_name = ":".join([e[0]+"_"+e[1] for e in zip(curr_gene_list,curr_prox_list)])
   685  123.742 MiB    0.000 MiB                       output_file.write("\t".join([str(e) for e in [gr.chrom,gr.initial,gr.final,curr_name]])+"\n")
   686  123.738 MiB   -0.004 MiB                   output_file.close()
   687  123.738 MiB    0.000 MiB                   if(options.bigbed):
   688  123.738 MiB    0.000 MiB                       chrom_sizes_file = genome_data.get_chromosome_sizes()
   689  123.738 MiB    0.000 MiB                       bb_file_name = output_file_name+".bb"
   690  123.738 MiB    0.000 MiB                       try:
   691  123.738 MiB    0.000 MiB                           os.system(" ".join(["bedToBigBed", output_file_name, chrom_sizes_file, bb_file_name, "-verbose=0"]))
   692  123.738 MiB    0.000 MiB                           os.remove(output_file_name)
   693                                                 except Exception: pass # WARNING
   694                             
   695                                             # Creating ev and nev sets
   696  123.738 MiB    0.000 MiB                   curr_ev = GenomicRegionSet(grs.name+"_ev")
   697  123.738 MiB    0.000 MiB                   curr_nev = GenomicRegionSet(grs.name+"_nev")
   698                             
   699                                             # Populating ev and nev sets
   700  123.738 MiB    0.000 MiB                   for gr in grs:
   701  123.738 MiB    0.000 MiB                       if(len([e for e in gr.name.split(":") if e[0]!="."]) > 0): curr_ev.add(gr)
   702  123.738 MiB    0.000 MiB                       else: curr_nev.add(gr)
   703                             
   704                                             # Calculating statistics
   705  123.738 MiB    0.000 MiB                   curr_a_dict, curr_b_dict, ev_genelist_dict, ev_mpbs_dict = get_fisher_dict(grouped_mpbs_dict_keys, curr_ev, mpbs_dict[original_name])
   706  123.738 MiB    0.000 MiB                   curr_c_dict, curr_d_dict, nev_genelist_dict, nev_mpbs_dict = get_fisher_dict(grouped_mpbs_dict_keys, curr_nev, mpbs_dict[original_name])
   707                             
   708                                             # Performing fisher test
   709  123.738 MiB    0.000 MiB                   result_list = []
   710  123.738 MiB    0.000 MiB                   for k in sorted_mpbs_dict_keys:
   711  123.738 MiB    0.000 MiB                       r = Result()
   712  123.738 MiB    0.000 MiB                       r.name = k; r.a = curr_a_dict[k]; r.b = curr_b_dict[k]; r.c = curr_c_dict[k]; r.d = curr_d_dict[k]
   713  123.738 MiB    0.000 MiB                       r.percent = float(r.a)/float(r.a+r.b); r.back_percent = float(r.c)/float(r.c+r.d)
   714  123.738 MiB    0.000 MiB                       r.genes = ev_genelist_dict[k]
   715  123.738 MiB    0.000 MiB                       try:
   716  123.738 MiB    0.000 MiB                           p = pvalue(r.a,r.b,r.c,r.d)
   717  123.738 MiB    0.000 MiB                           r.p_value = p.right_tail
   718                                                 except Exception: r.p_value = 1.0
   719  123.738 MiB    0.000 MiB                       result_list.append(r)
   720                                             
   721                                             # Performing multiple test correction
   722  123.738 MiB    0.000 MiB                   multuple_corr_rej, multiple_corr_list = multiple_test_correction([e.p_value for e in result_list], 
   723  123.738 MiB    0.000 MiB                                                           alpha=options.multiple_test_alpha, method='indep')
   724  123.738 MiB    0.000 MiB                   corr_pvalue_dict = dict() # Needed to filter the mpbs in a fast way
   725  123.738 MiB    0.000 MiB                   for i in range(0,len(multiple_corr_list)):
   726  123.738 MiB    0.000 MiB                       result_list[i].corr_p_value = multiple_corr_list[i]
   727  123.738 MiB    0.000 MiB                       corr_pvalue_dict[result_list[i].name] = result_list[i].corr_p_value
   728                             
   729                                             # Sorting result list
   730  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.name)
   731  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.percent, reverse=True)
   732  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.p_value)
   733  123.738 MiB    0.000 MiB                   result_list = sorted(result_list, key=lambda x: x.corr_p_value)
   734                             
   735                                             # Preparing results for printing
   736  123.738 MiB    0.000 MiB                   for r in result_list:
   737  123.738 MiB    0.000 MiB                       r.p_value = "%.4e" % r.p_value
   738  123.738 MiB    0.000 MiB                       r.corr_p_value = "%.4e" % r.corr_p_value
   739  123.738 MiB    0.000 MiB                       r.percent = str(round(r.percent,4)*100)+"%"
   740  123.738 MiB    0.000 MiB                       r.back_percent = str(round(r.back_percent,4)*100)+"%"
   741                             
   742                                             # Printing ev and nev mpbs
   743  123.738 MiB    0.000 MiB                   output_file_name_ev = os.path.join(curr_output_folder_name, output_mpbs_filtered_ev+".bedT")
   744  123.738 MiB    0.000 MiB                   output_file_name_nev = os.path.join(curr_output_folder_name, output_mpbs_filtered_nev+".bedT")
   745  123.738 MiB    0.000 MiB                   output_file_ev = open(output_file_name_ev,"w")
   746  123.738 MiB    0.000 MiB                   output_file_nev = open(output_file_name_nev,"w")
   747  123.746 MiB    0.008 MiB                   for k in sorted_mpbs_dict_keys:
   748  123.746 MiB    0.000 MiB                       if(corr_pvalue_dict[k] > options.print_thresh): continue
   749  123.746 MiB    0.000 MiB                       for gr in ev_mpbs_dict[k]: output_file_ev.write("\t".join([str(e) for e in [gr.chrom,gr.initial,gr.final,
   750  123.746 MiB    0.000 MiB                                               gr.name,gr.data,gr.orientation,gr.initial,gr.final,ev_color]])+"\n")
   751  123.746 MiB    0.000 MiB                       for gr in nev_mpbs_dict[k]: output_file_nev.write("\t".join([str(e) for e in [gr.chrom,gr.initial,gr.final,
   752  123.746 MiB    0.000 MiB                                                gr.name,gr.data,gr.orientation,gr.initial,gr.final,nev_color]])+"\n")
   753  123.742 MiB   -0.004 MiB                   output_file_ev.close()
   754  123.738 MiB   -0.004 MiB                   output_file_nev.close()
   755  123.738 MiB    0.000 MiB                   output_file_name_ev_bed = os.path.join(curr_output_folder_name, output_mpbs_filtered_ev+".bed")
   756  123.738 MiB    0.000 MiB                   output_file_name_nev_bed = os.path.join(curr_output_folder_name, output_mpbs_filtered_nev+".bed")
   757  123.738 MiB    0.000 MiB                   os.system("sort -k1,1 -k2,2n "+output_file_name_ev+" > "+output_file_name_ev_bed) # Sorting ev file
   758  123.738 MiB    0.000 MiB                   os.system("sort -k1,1 -k2,2n "+output_file_name_nev+" > "+output_file_name_nev_bed) # Sorting nev file
   759  123.738 MiB    0.000 MiB                   os.remove(output_file_name_ev)
   760  123.738 MiB    0.000 MiB                   os.remove(output_file_name_nev)
   761  123.738 MiB    0.000 MiB                   if(options.bigbed):
   762  123.738 MiB    0.000 MiB                       chrom_sizes_file = genome_data.get_chromosome_sizes()
   763  123.738 MiB    0.000 MiB                       output_file_name_ev_bb = os.path.join(curr_output_folder_name, output_mpbs_filtered_ev+".bb")
   764  123.738 MiB    0.000 MiB                       output_file_name_nev_bb = os.path.join(curr_output_folder_name, output_mpbs_filtered_nev+".bb")
   765  123.738 MiB    0.000 MiB                       try:
   766  123.738 MiB    0.000 MiB                           os.system(" ".join(["bedToBigBed",output_file_name_ev_bed,chrom_sizes_file,output_file_name_ev_bb,"-verbose=0"]))
   767  123.738 MiB    0.000 MiB                           os.system(" ".join(["bedToBigBed",output_file_name_nev_bed,chrom_sizes_file,output_file_name_nev_bb,"-verbose=0"]))
   768  123.738 MiB    0.000 MiB                           os.remove(output_file_name_ev_bed)
   769  123.738 MiB    0.000 MiB                           os.remove(output_file_name_nev_bed)
   770                                                 except Exception: pass # WARNING
   771                             
   772                                             # Printing statistics text
   773  123.738 MiB    0.000 MiB                   output_file_name_stat_text = os.path.join(curr_output_folder_name, output_stat_genetest+".txt")
   774  123.738 MiB    0.000 MiB                   output_file = open(output_file_name_stat_text,"w")
   775  123.742 MiB    0.004 MiB                   output_file.write(results_header_text+"\n")
   776  123.742 MiB    0.000 MiB                   for r in result_list: output_file.write(str(r)+"\n")
   777  123.738 MiB   -0.004 MiB                   output_file.close()
   778                             
   779                                             # Printing statistics html - Creating data table
   780  123.738 MiB    0.000 MiB                   data_table = []
   781  123.738 MiB    0.000 MiB                   for r in result_list:
   782  123.738 MiB    0.000 MiB                       curr_motif_tuple = [image_data.get_default_motif_logo(), logo_width]
   783  123.738 MiB    0.000 MiB                       for rep in motif_data.get_logo_list():
   784  123.738 MiB    0.000 MiB                           logo_file_name = os.path.join(rep,r.name+".png")
   785  123.738 MiB    0.000 MiB                           if(os.path.isfile(logo_file_name)):
   786  123.738 MiB    0.000 MiB                               curr_motif_tuple = [logo_file_name, logo_width]
   787  123.738 MiB    0.000 MiB                               break
   788  123.738 MiB    0.000 MiB                       curr_gene_tuple = ["View",gprofiler_link+",".join(r.genes.genes)]
   789  123.738 MiB    0.000 MiB                       data_table.append([r.name,curr_motif_tuple,str(r.p_value),str(r.corr_p_value),str(r.a),str(r.b),
   790  123.738 MiB    0.000 MiB                                          str(r.c),str(r.d),str(r.percent),str(r.back_percent),curr_gene_tuple])
   791                             
   792                                             # Printing statistics html - Writing to HTML
   793  123.738 MiB    0.000 MiB                   output_file_name_html = os.path.join(curr_output_folder_name, output_stat_genetest+".html")
   794  123.738 MiB    0.000 MiB                   html = Html("Motif Enrichment Analysis", genetest_link_dict, cluster_path_fix=cluster_path_fix)
   795  123.738 MiB    0.000 MiB                   html.add_heading("Results for <b>"+original_name+"</b> region <b>Gene Test*</b> using genes from <b>"+curr_input.gene_set.name+"</b>", align = "center", bold=False)
   796  123.738 MiB    0.000 MiB                   html.add_heading("* This gene test considered regions associated to the gene list given against regions not associated to the gene list", align = "center", bold=False, size = 3)
   797  123.738 MiB    0.000 MiB                   html.add_zebra_table(html_header, html_col_size, html_type_list, data_table, align = "center")
   798  123.738 MiB    0.000 MiB                   html.write(output_file_name_html)         
   799                             
   800                                         else:
   801                             
   802                                             # Association still needs to be done with all genes in order to print gene list of random test
   803                                             grs = grs.gene_association(None, options.organism, options.promoter_length, options.maximum_association_length)
   804                             
   805                                             # If there is no gene list, then the current evidence set consists of all coordinates
   806                                             curr_ev = grs
   807                             
   808                                             # Calculating statistics
   809                                             curr_a_dict, curr_b_dict, ev_genelist_dict, ev_mpbs_dict = get_fisher_dict(grouped_mpbs_dict_keys, curr_ev, mpbs_dict[original_name])
   810                             
   811                                         ###################################################################################################
   812                                         # Random Statistics
   813                                         ###################################################################################################
   814                             
   815                                         # Performing fisher test
   816  123.738 MiB    0.000 MiB               result_list = []
   817  123.738 MiB    0.000 MiB               for k in sorted_mpbs_dict_keys:
   818  123.738 MiB    0.000 MiB                   r = Result()
   819  123.738 MiB    0.000 MiB                   r.name = k; r.a = curr_a_dict[k]; r.b = curr_b_dict[k]; r.c = rand_c_dict[k]; r.d = rand_d_dict[k]
   820  123.738 MiB    0.000 MiB                   r.percent = float(r.a)/float(r.a+r.b); r.back_percent = float(r.c)/float(r.c+r.d)
   821  123.738 MiB    0.000 MiB                   r.genes = ev_genelist_dict[k]
   822  123.738 MiB    0.000 MiB                   try:
   823  123.738 MiB    0.000 MiB                       p = pvalue(r.a,r.b,r.c,r.d)
   824  123.738 MiB    0.000 MiB                       r.p_value = p.right_tail
   825                                             except Exception: r.p_value = 1.0
   826  123.738 MiB    0.000 MiB                   result_list.append(r)
   827                                             
   828                                         # Performing multiple test correction
   829  123.738 MiB    0.000 MiB               multuple_corr_rej, multiple_corr_list = multiple_test_correction([e.p_value for e in result_list], 
   830  123.738 MiB    0.000 MiB                                                       alpha=options.multiple_test_alpha, method='indep')
   831  123.738 MiB    0.000 MiB               corr_pvalue_dict = dict() # Needed to filter the mpbs in a fast way
   832  123.738 MiB    0.000 MiB               for i in range(0,len(multiple_corr_list)):
   833  123.738 MiB    0.000 MiB                   result_list[i].corr_p_value = multiple_corr_list[i]
   834  123.738 MiB    0.000 MiB                   corr_pvalue_dict[result_list[i].name] = result_list[i].corr_p_value
   835                             
   836                                         # Sorting result list
   837  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.name)
   838  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.percent, reverse=True)
   839  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.p_value)
   840  123.738 MiB    0.000 MiB               result_list = sorted(result_list, key=lambda x: x.corr_p_value)
   841                             
   842                                         # Preparing results for printing
   843  123.738 MiB    0.000 MiB               for r in result_list:
   844  123.738 MiB    0.000 MiB                   r.p_value = "%.4e" % r.p_value
   845  123.738 MiB    0.000 MiB                   r.corr_p_value = "%.4e" % r.corr_p_value
   846  123.738 MiB    0.000 MiB                   r.percent = str(round(r.percent,4)*100)+"%"
   847  123.738 MiB    0.000 MiB                   r.back_percent = str(round(r.back_percent,4)*100)+"%"
   848                             
   849                                         # Printing ev if it was not already print in geneset
   850  123.738 MiB    0.000 MiB               if(not curr_input.gene_set):
   851                                             output_file_name_ev = os.path.join(curr_output_folder_name, output_mpbs_filtered_ev+".bedT")
   852                                             output_file_ev = open(output_file_name_ev,"w")
   853                                             for k in sorted_mpbs_dict_keys:
   854                                                 if(corr_pvalue_dict[k] > options.print_thresh): continue
   855                                                 for gr in ev_mpbs_dict[k]: output_file_ev.write("\t".join([str(e) for e in [gr.chrom,gr.initial,gr.final,
   856                                                                            gr.name,gr.data,gr.orientation,gr.initial,gr.final,ev_color]])+"\n")
   857                                             output_file_ev.close()
   858                                             output_file_name_ev_bed = os.path.join(curr_output_folder_name, output_mpbs_filtered_ev+".bed")
   859                                             os.system("sort -k1,1 -k2,2n "+output_file_name_ev+" > "+output_file_name_ev_bed) # Sorting ev file
   860                                             os.remove(output_file_name_ev)
   861                                             if(options.bigbed):
   862                                                 chrom_sizes_file = genome_data.get_chromosome_sizes()
   863                                                 output_file_name_ev_bb = os.path.join(curr_output_folder_name, output_mpbs_filtered_ev+".bb")
   864                                                 try:
   865                                                     os.system(" ".join(["bedToBigBed",output_file_name_ev_bed,chrom_sizes_file,output_file_name_ev_bb,"-verbose=0"]))
   866                                                     os.remove(output_file_name_ev_bed)
   867                                                 except Exception: pass # WARNING
   868                             
   869                                         # Printing statistics text
   870  123.738 MiB    0.000 MiB               output_file_name_stat_text = os.path.join(curr_output_folder_name, output_stat_randtest+".txt")
   871  123.738 MiB    0.000 MiB               output_file = open(output_file_name_stat_text,"w")
   872  123.742 MiB    0.004 MiB               output_file.write(results_header_text+"\n")
   873  123.742 MiB    0.000 MiB               for r in result_list: output_file.write(str(r)+"\n")
   874  123.738 MiB   -0.004 MiB               output_file.close()
   875                             
   876                                         # Printing statistics html - Creating data table
   877  123.738 MiB    0.000 MiB               data_table = []
   878  123.738 MiB    0.000 MiB               for r in result_list:
   879  123.738 MiB    0.000 MiB                   curr_motif_tuple = [image_data.get_default_motif_logo(), logo_width]
   880  123.738 MiB    0.000 MiB                   for rep in motif_data.get_logo_list():
   881  123.738 MiB    0.000 MiB                       logo_file_name = os.path.join(rep,r.name+".png")
   882  123.738 MiB    0.000 MiB                       if(os.path.isfile(logo_file_name)):
   883  123.738 MiB    0.000 MiB                           curr_motif_tuple = [logo_file_name, logo_width]
   884  123.738 MiB    0.000 MiB                           break
   885  123.738 MiB    0.000 MiB                   curr_gene_tuple = ["View",gprofiler_link+",".join(r.genes.genes)]
   886  123.738 MiB    0.000 MiB                   data_table.append([r.name,curr_motif_tuple,str(r.p_value),str(r.corr_p_value),str(r.a),str(r.b),
   887  123.738 MiB    0.000 MiB                                      str(r.c),str(r.d),str(r.percent),str(r.back_percent),curr_gene_tuple])
   888                             
   889                                         # Printing statistics html
   890  123.738 MiB    0.000 MiB               output_file_name_html = os.path.join(curr_output_folder_name, output_stat_randtest+".html")
   891  123.738 MiB    0.000 MiB               html = Html("Motif Enrichment Analysis", randtest_link_dict, cluster_path_fix=cluster_path_fix)
   892  123.738 MiB    0.000 MiB               if(curr_input.gene_set):
   893  123.738 MiB    0.000 MiB                   html.add_heading("Results for <b>"+original_name+"</b> region <b>Random Test*</b> using genes from <b>"+curr_input.gene_set.name+"</b>", align = "center", bold=False)
   894  123.738 MiB    0.000 MiB                   html.add_heading("* This random test considered regions associated to the gene list given against background (random) regions", align = "center", bold=False, size = 3)
   895                                         else:
   896                                             html.add_heading("Results for <b>"+original_name+"</b> region <b>Random Test*</b> using all input regions", align = "center", bold=False)
   897                                             html.add_heading("* This random test considered all regions against background (random) regions", align = "center", bold=False, size = 3)
   898                             
   899  123.738 MiB    0.000 MiB               html.add_zebra_table(html_header, html_col_size, html_type_list, data_table, align = "center")
   900  123.738 MiB    0.000 MiB               html.write(output_file_name_html)


